From 9a565680ec42972b6503840f132c81a8e6ff69e1 Mon Sep 17 00:00:00 2001
From: Andreas Galauner <andreas@galauner.de>
Date: Mon, 25 Nov 2019 00:13:53 +0100
Subject: [PATCH 3/5] Add LVDS mode to MT9V032 camera driver

---
 drivers/media/i2c/mt9v032.c | 129 ++++++++++++++++++++++++++++++++++--
 1 file changed, 124 insertions(+), 5 deletions(-)

diff --git a/drivers/media/i2c/mt9v032.c b/drivers/media/i2c/mt9v032.c
index f74730d24d8f..33fece53613f 100644
--- a/drivers/media/i2c/mt9v032.c
+++ b/drivers/media/i2c/mt9v032.c
@@ -25,6 +25,8 @@
 #include <linux/videodev2.h>
 #include <linux/v4l2-mediabus.h>
 #include <linux/module.h>
+#include <linux/gpio.h>
+#include <linux/gpio/consumer.h>
 
 #include <media/i2c/mt9v032.h>
 #include <media/v4l2-ctrls.h>
@@ -145,6 +147,30 @@
 #define MT9V032_AEC_MAX_SHUTTER_WIDTH			0xbd
 #define MT9V032_THERMAL_INFO				0xc1
 
+#define	MT9V032_LVDS_MASTER_CONTROL			0xb1
+#define		MT9V032_LVDS_PLL_BYPASS		(1 << 0)
+#define		MT9V032_LVDS_POWERDOWN		(1 << 1)
+#define		MT9V032_LVDS_PLL_TEST_MODE	(1 << 2)
+#define		MT9V032_LVDS_TEST_MODE		(1 << 3)
+
+#define	MT9V032_LVDS_SHIFT_CLOCK_CONTROL	0xb2
+#define		MT9V032_SHIFT_CLK_DELAY_MASK	(7 << 0)
+#define		MT9V032_SHIFT_CLK_DELAY_SHIFT	0
+#define		MT9V032_LVDS_CLOCK_OUTPUT_ENA	(1 << 4)
+
+#define	MT9V032_LVDS_DATA_CONTROL			0xb3
+#define		MT9V032_DATA_DELAY_MASK			(7 << 0)
+#define		MT9V032_DATA_DELAY_SHIFT		0
+#define		MT9V032_LVDS_DATA_INPUT_ENA		(1 << 4)
+
+#define MT9V032_LVDS_LATENCY_CONTROL		0xb4
+#define		MT9V032_STREAM_LATENCY_SELECT_MASK	(3 << 0)
+#define		MT9V032_STREAM_LATENCY_SELECT_SHIFT	0
+
+#define	MT9V032_LVDS_PAYLOAD_CONTROL		0xb6
+#define		MT9V032_LVDS_PAYLOAD_10BIT		(1 << 0)
+
+
 enum mt9v032_model {
 	MT9V032_MODEL_V022_COLOR,	/* MT9V022IX7ATC */
 	MT9V032_MODEL_V022_MONO,	/* MT9V022IX7ATM */
@@ -206,6 +232,12 @@ struct mt9v032 {
 	struct clk *clk;
 	struct gpio_desc *reset_gpio;
 	struct gpio_desc *standby_gpio;
+	struct gpio_desc *adr0_gpio;
+	struct gpio_desc *adr1_gpio;
+	struct gpio_desc *douten_gpio;
+
+	bool lvds_mode;
+	bool embedded_syncs_mode;
 
 	struct mt9v032_platform_data *pdata;
 	const struct mt9v032_model_info *model;
@@ -265,13 +297,22 @@ mt9v032_update_hblank(struct mt9v032 *mt9v032)
 static int mt9v032_power_on(struct mt9v032 *mt9v032)
 {
 	struct regmap *map = mt9v032->regmap;
+	struct i2c_client *client = v4l2_get_subdevdata(&mt9v032->subdev);
 	int ret;
 
 	gpiod_set_value_cansleep(mt9v032->reset_gpio, 1);
 
-	ret = clk_set_rate(mt9v032->clk, mt9v032->sysclk);
-	if (ret < 0)
-		return ret;
+	// Set desired I2C address
+	gpiod_set_value_cansleep(mt9v032->adr0_gpio, client->addr & (1<<2));
+	gpiod_set_value_cansleep(mt9v032->adr1_gpio, client->addr & (1<<4));
+
+	// Enable parallel data out if not in LVDS mode
+	gpiod_set_value_cansleep(mt9v032->douten_gpio, mt9v032->lvds_mode ? 0 : 1);
+
+	//FIXME: why does this fail with fixed-regulators?
+	// ret = clk_set_rate(mt9v032->clk, mt9v032->sysclk);
+	// if (ret < 0)
+	// 	return ret;
 
 	/* System clock has to be enabled before releasing the reset */
 	ret = clk_prepare_enable(mt9v032->clk);
@@ -300,6 +341,23 @@ static int mt9v032_power_on(struct mt9v032 *mt9v032)
 	if (ret < 0)
 		goto err;
 
+	/* Configure LVDS outputs of desired */
+	if(mt9v032->lvds_mode) {
+		//no PLL bypass, no LVDS powerdown, no PLL test, no LVDS test
+		ret = regmap_write(map, MT9V032_LVDS_MASTER_CONTROL, 0);
+		if (ret < 0)
+			return ret;
+
+		//disable or enable 10 bit mode
+		if(mt9v032->embedded_syncs_mode)
+			ret = regmap_write(map, MT9V032_LVDS_PAYLOAD_CONTROL, MT9V032_LVDS_PAYLOAD_10BIT);
+		else
+			ret = regmap_write(map, MT9V032_LVDS_PAYLOAD_CONTROL, 0);
+
+		if (ret < 0)
+			return ret;
+	}
+
 	ret = regmap_write(map, MT9V032_CHIP_CONTROL,
 			   MT9V032_CHIP_CONTROL_MASTER_MODE);
 	if (ret < 0)
@@ -391,7 +449,18 @@ static int mt9v032_s_stream(struct v4l2_subdev *subdev, int enable)
 	int ret;
 
 	if (!enable)
-		return regmap_update_bits(map, MT9V032_CHIP_CONTROL, mode, 0);
+	{
+		///* Disable LVDS output if needed */
+		//if (mt9v032->lvds_mode)
+		//{
+		//	printk("Disabling LVDS\n");
+		//	regmap_update_bits(map, MT9V032_LVDS_MASTER_CONTROL, MT9V032_LVDS_POWERDOWN, MT9V032_LVDS_POWERDOWN);
+		//}
+
+		ret = regmap_update_bits(map, MT9V032_CHIP_CONTROL, mode, 0);
+
+		return ret;
+	}
 
 	/* Configure the window size and row/column bin */
 	hbin = fls(mt9v032->hratio) - 1;
@@ -424,7 +493,24 @@ static int mt9v032_s_stream(struct v4l2_subdev *subdev, int enable)
 		return ret;
 
 	/* Switch to master "normal" mode */
-	return regmap_update_bits(map, MT9V032_CHIP_CONTROL, mode, mode);
+	ret = regmap_update_bits(map, MT9V032_CHIP_CONTROL, mode, mode);
+	if (ret < 0)
+		return ret;
+
+	// /* Configure LVDS outputs if desired */
+	// if(mt9v032->lvds_mode) {
+	// 	printk("Enabling LVDS\n");
+
+	// 	//no PLL bypass, no LVDS powerdown, no PLL test, no LVDS test
+	// 	ret = regmap_write(map, MT9V032_LVDS_MASTER_CONTROL, 0);
+	// 	if (ret < 0)
+	// 		return ret;
+
+	// 	//disable 10 bit mode
+	// 	regmap_write(map, MT9V032_LVDS_PAYLOAD_CONTROL, 0);
+	// }
+
+	return ret;
 }
 
 static int mt9v032_enum_mbus_code(struct v4l2_subdev *subdev,
@@ -435,6 +521,7 @@ static int mt9v032_enum_mbus_code(struct v4l2_subdev *subdev,
 		return -EINVAL;
 
 	code->code = MEDIA_BUS_FMT_SGRBG10_1X10;
+
 	return 0;
 }
 
@@ -932,6 +1019,10 @@ static int mt9v032_open(struct v4l2_subdev *subdev, struct v4l2_subdev_fh *fh)
 	else
 		format->code = MEDIA_BUS_FMT_Y10_1X10;
 
+	//FIXME: HACK, make this configurable?
+	if (mt9v032->lvds_mode)
+		format->code = MEDIA_BUS_FMT_Y8_1X8;
+
 	format->width = MT9V032_WINDOW_WIDTH_DEF;
 	format->height = MT9V032_WINDOW_HEIGHT_DEF;
 	format->field = V4L2_FIELD_NONE;
@@ -1063,6 +1154,30 @@ static int mt9v032_probe(struct i2c_client *client,
 	if (IS_ERR(mt9v032->standby_gpio))
 		return PTR_ERR(mt9v032->standby_gpio);
 
+	mt9v032->adr0_gpio = devm_gpiod_get_optional(&client->dev, "adr0",
+							GPIOD_OUT_LOW);
+	if (IS_ERR(mt9v032->adr0_gpio))
+		return PTR_ERR(mt9v032->adr0_gpio);
+
+	mt9v032->adr1_gpio = devm_gpiod_get_optional(&client->dev, "adr1",
+							GPIOD_OUT_LOW);
+	if (IS_ERR(mt9v032->adr1_gpio))
+		return PTR_ERR(mt9v032->adr1_gpio);
+
+	mt9v032->douten_gpio = devm_gpiod_get_optional(&client->dev, "douten",
+							GPIOD_OUT_LOW);
+	if (IS_ERR(mt9v032->douten_gpio))
+		return PTR_ERR(mt9v032->douten_gpio);
+
+
+	mt9v032->lvds_mode = of_property_read_bool(client->dev.of_node, "lvds-mode");
+	if(mt9v032->lvds_mode)
+		dev_info(&client->dev, "MT9V032 at address 0x%02x has LVDS mode enabled\n", client->addr);
+
+	mt9v032->embedded_syncs_mode = of_property_read_bool(client->dev.of_node, "embedded-syncs");
+		dev_info(&client->dev, "MT9V032 at address 0x%02x has embedded sync mode enabled\n", client->addr);
+
+
 	mutex_init(&mt9v032->power_lock);
 	mt9v032->pdata = pdata;
 	mt9v032->model = (const void *)did->driver_data;
@@ -1146,6 +1261,10 @@ static int mt9v032_probe(struct i2c_client *client,
 	else
 		mt9v032->format.code = MEDIA_BUS_FMT_Y10_1X10;
 
+	//FIXME: HACK, make this configurable?
+	if (mt9v032->lvds_mode)
+		mt9v032->format.code = MEDIA_BUS_FMT_Y8_1X8;
+
 	mt9v032->format.width = MT9V032_WINDOW_WIDTH_DEF;
 	mt9v032->format.height = MT9V032_WINDOW_HEIGHT_DEF;
 	mt9v032->format.field = V4L2_FIELD_NONE;
-- 
2.24.1

